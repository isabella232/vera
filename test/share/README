I think this directory deserves a bit of explanation.  Because of the way the
helper plays games with the module.parent.exports, if you require a set of tests
in another file it'll mess with your own module.parent.exports.  This has the
magical consequence that you can put a set of tests in one file and the init
of the tests in the other, effectively sharing the same set of tests for two
implementations of a class.

This is illustrated with the following example I removed after coming up with a
proof of concept.  I'm sure this could be used for evil purposes, but it's
exactly the behavior I wanted at the time.  Oh happy accidents!

------ share.js ------
var helper = require('../helper.js');
var test = helper.test;

test('log it', function (t) {
    var self = this;
    console.log(self.value);
    t.done();
});

------ a.test.js ------
var helper = require('../helper.js');
var share = require('./share');
var before = helper.before;
before(function (cb) {
    var self = this;
    self.value = 'aaaaaaaaaaa';
    cb();
});

------ b.test.js ------
var helper = require('../helper.js');
var share = require('./share');
var before = helper.before;
before(function (cb) {
    var self = this;
    self.value = 'bbbbbbbbbbb';
    cb();
});

------ output ------
$ find test/share/ -name *.test.js | \
    xargs -n 1 ./node_modules/nodeunit/bin/nodeunit

a.test.js
aaaaaaaaaaa
✔ log it

OK: 0 assertions (19ms)

b.test.js
bbbbbbbbbbb
✔ log it

OK: 0 assertions (18ms)
